.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "KFC" "1" "June 2015" "" ""
.
.SH "NAME"
\fBkfc\fR \- kafka client
.
.SH "SYNOPSIS"
.
.nf

kfc producer [\-\-brokers=<brks>] [\-\-partition=<part>] [\-\-compression=<comp>]
             [\-\-delimiter=<delim>] [\-\-key\-delimiter=<delim>] [\-\-count=<cnt>]
             [\-\-error\-file=<file>] [\-T | \-\-tee] [\-q | \-\-quiet]
             [ (\-X <conf>)\|\.\|\.\|\. ] [\-v | \-\-verbose] <topic> [<file>\|\.\|\.\|\.]

kfc consumer [\-\-brokers=<brks>] [\-\-partition=<part>] [\-\-offset=<off>]
             [\-\-delimiter=<delim>] [\-\-key\-delimiter=<delim>] [\-\-count=<cnt>]
             [\-e | \-\-exit] [\-O | \-\-print\-offset] [\-u | \-\-unbuffered]
             [ (\-X <conf>)\|\.\|\.\|\. ] [\-q | \-\-quiet] [\-v | \-\-verbose] <topic>

kfc metadata [\-\-brokers=<brks>] [\-\-partition=<part>] [\-q | \-\-quiet]
             [ (\-X <conf>)\|\.\|\.\|\. ] [\-v | \-\-verbose] [<topic>]

kfc \-\-help

kfc \-\-version
.
.fi
.
.SH "DESCRIPTION"
\fBkfc\fR also known as \fBkafkacat\fR is a generic non\-JVM producer and consumer for Apache Kafka 0\.8, think of it as a netcat for Kafka\.
.
.P
\fBkfc\fR works in different \fIcommand\fR: producer, consumer and metadata\. Each one is described in the [COMMAND] section\.
.
.SH "COMMAND"
.
.IP "\[ci]" 4
\fBproducer\fR reads messages from stdin, delimited with a configurable delimeter and produces them to the provided Kafka cluster, topic and partition\.
.
.IP "\[ci]" 4
\fBconsumer\fR reads messages from a topic (and possibly a specific partition ) and prints them to stdout using the configured message delimiter\.
.
.IP "\[ci]" 4
\fBmetadata\fR displays the current state of the Kafka cluster and its topics and partitions\.
.
.IP "" 0
.
.SH "OPTIONS"
.
.SS "Generic options"
.
.IP "\[ci]" 4
\fB\-b <brokers>, \-\-brokers=<brokers>\fR Comma separated list of broker(s) to bootstrap the connection, e\.g\. "host1:9292,host2:9293" [default: localhost]\.
.
.IP "\[ci]" 4
\fB\-p <partition>, \-\-partition=<partition>\fR Send messages to a specific partition\. If \-1 is provided, a random partition is attributed to each message\.
.
.IP "\[ci]" 4
\fB\-X <conf>\fR Relay \fB<conf>\fR to librdkafka configuration system\. This option hides a lot of functionnality\. For more information, the user should read the matching \fBCONFIGURATION\.md\fR of librdkafka\.
.
.IP "\[ci]" 4
\fB\-v, \-\-verbose\fR Augment verbosity level\.
.
.IP "\[ci]" 4
\fB\-q, \-\-quiet\fR Quiet mode, do not report error messages to stderr\.
.
.IP "\[ci]" 4
\fB\-V, \-\-version\fR Show the version on the first line and follow with the usage and help message\.
.
.IP "\[ci]" 4
\fB\-h, \-\-help\fR Show the usage and help message\.
.
.IP "" 0
.
.SS "Producer options"
.
.IP "\[ci]" 4
\fB\-d <delim>, \-\-delimiter=<delim>\fR Message delimiter character: a\-z\.\. | \er | \en | \et | \exNN [default: \en]\.
.
.IP "\[ci]" 4
\fB\-k <delim>, \-\-key\-delimiter=<delim>\fR Key delimiter character: a\-z\.\. | \er | \en | \et | \exNN\.
.
.IP "\[ci]" 4
\fB\-c <cnt>, \-\-count=<cnt>\fR Exit after producing \fB<cnt>\fR messages\.
.
.IP "\[ci]" 4
\fB\-z <c>, \-\-compression=<c>\fR Compression applied to messages: none, snappy or gzip [default: none]\.
.
.IP "\[ci]" 4
\fB\-T, \-\-tee\fR Output queued messages to stdout, acting like tee\. A message is relayed to stdout once it hits librdkafka\'s internal queue, it can still fail to reach the broker\. See \fB\-E\fR for more information on failed messages\.
.
.IP "\[ci]" 4
\fB\-E <file>, \-\-error\-file=<file>\fR Messages that couldn\'t be sent are written to \fB<file>\fR\. There is no guarantee on the ordering of messages [default: stderr]\.
.
.IP "" 0
.
.SS "Consumer options"
.
.IP "\[ci]" 4
\fB\-d <delim>, \-\-delimiter=<delim>\fR Message delimiter character: a\-z\.\. | \er | \en | \et | \exNN [default: \en]\.
.
.IP "\[ci]" 4
\fB\-k <delim>, \-\-key\-delimiter=<delim>\fR Key delimiter character: a\-z\.\. | \er | \en | \et | \exNN\.
.
.IP "\[ci]" 4
\fB\-o <off>, \-\-offset=<off>\fR Define the consuming offset, the possible values are:
.
.IP "\[ci]" 4
\fBbeginning\fR: start from the beginning
.
.IP "\[ci]" 4
\fBend\fR: start from the end
.
.IP "\[ci]" 4
\fBstored\fR: start from a stored value
.
.IP "\[ci]" 4
\fB<value>\fR: start at absolute \fIvalue\fR
.
.IP "\[ci]" 4
\fB\-<value>\fR: start at relative offset from the end (acting like \fBtail\fR)\.
.
.IP "" 0

.
.IP "\[ci]" 4
\fB\-c <cnt>, \-\-count=<cnt>\fR Exit after consuming \fB<cnt>\fR messages\.
.
.IP "\[ci]" 4
\fB\-e , \-\-exit\fR Exit when there is no message left to consumer in the topic\.
.
.IP "\[ci]" 4
\fB\-u , \-\-unbuffered\fR Do not buffer stdout, useful for low volume topic\.
.
.IP "" 0
.
.SH "EXAMPLES"
.
.IP "\[ci]" 4
Producing a single message
.
.IP "" 0
.
.IP "" 4
.
.nf

    $ echo "test message" | kfc producer test
.
.fi
.
.IP "" 0
.
.IP "\[ci]" 4
Consuming the last message and exiting immediately
.
.IP "" 0
.
.IP "" 4
.
.nf

    $ kfc consumer \-e \-o \-1 test
    test message
.
.fi
.
.IP "" 0
.
.IP "\[ci]" 4
Showing metadata on the test topic
.
.IP "" 0
.
.IP "" 4
.
.nf

    $ kfc metadata test
    {
      "brokers": [
        { "id":0, "host":"localhost:9092" }
      ],
      "topics": [
        {
          "name": "test",
          "partitions": [
            { "id": 0, "leader": 0, "replicas": [0], "isrs": [0] }
          ]
        }
      ]
    }
.
.fi
.
.IP "" 0

